apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: s2i-java-deployment-petclinic-bg
spec:
  params:
    - name: APP_NAME
      type: string
    - name: TARGET_NAMESPACE
      type: string
    - name: GIT_REPO
      type: string
    - name: GIT_REVISION
      type: string
    - name: IMAGE_NAME
      type: string
    - default: .
      name: PATH_CONTEXT
      type: string
    - default: openjdk-11-ubi8
      name: VERSION
      type: string
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.GIT_REPO)
        - name: revision
          value: $(params.GIT_REVISION)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: 'true'
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
    - name: get-build-id
      taskRef:
        kind: Task
        name: generate-build-id
    - name: check-deployment-exist
      params:
        - name: appname
          value: $(params.APP_NAME)-blue
        - name: namespace
          value: $(params.TARGET_NAMESPACE)
      taskRef:
        kind: Task
        name: check-deployment-exist
    - name: build
      params:
        - name: IMAGE
          value: '$(params.IMAGE_NAME):$(tasks.get-build-id.results.build-id)'
        - name: TLSVERIFY
          value: 'false'
        - name: PATH_CONTEXT
          value: $(params.PATH_CONTEXT)
        - name: VERSION
          value: $(params.VERSION)
        - name: MAVEN_CLEAR_REPO
          value: 'true'
      runAfter:
        - fetch-repository
        - get-build-id
        - check-deployment-exist
      taskRef:
        kind: ClusterTask
        name: s2i-java
      workspaces:
        - name: source
          workspace: workspace
    - name: latest-tag
      params:
        - name: srcImageURL
          value: 'docker://$(params.IMAGE_NAME):$(tasks.get-build-id.results.build-id)'
        - name: destImageURL
          value: 'docker://$(params.IMAGE_NAME):latest'
        - name: srcTLSverify
          value: 'false'
        - name: destTLSverify
          value: 'false'
      runAfter:
        - build
      taskRef:
        kind: ClusterTask
        name: skopeo-copy
      workspaces:
        - name: images-url
          workspace: workspace
    - name: deploy-new-app
      params:
        - name: SCRIPT
          value: >-
            oc apply -f /workspace/output/deployment-ocp/bluegreen/ -n
            $(params.TARGET_NAMESPACE)
      runAfter:
        - latest-tag
      taskRef:
        kind: Task
        name: oc-workspace
      when:
        - input: $(tasks.check-deployment-exist.results.existed-num)
          operator: in
          values:
            - '0'
      workspaces:
        - name: output
          workspace: workspace
    - name: new-pod-replicas
      params:
        - name: NAMESPACE
          value: $(params.TARGET_NAMESPACE)
        - name: ROUTE_NAME
          value: $(params.APP_NAME)
        - name: BLUE_APP
          value: $(params.APP_NAME)-blue
        - name: GREEN_APP
          value: $(params.APP_NAME)-green
      runAfter:
        - deploy-new-app
      taskRef:
        kind: Task
        name: change-pod-replicas
      when:
        - input: $(tasks.check-deployment-exist.results.existed-num)
          operator: in
          values:
            - '0'
    - name: new-status
      params:
        - name: SCRIPT
          value: >-
            echo '## Pod Info'

            oc get pod -n $(params.TARGET_NAMESPACE) | grep $(params.APP_NAME)

            echo ' '

            echo '## Service Info'

            oc get svc -n $(params.TARGET_NAMESPACE) | grep $(params.APP_NAME)

            echo ' '

            echo '## Route Info'

            oc get route  -n $(params.TARGET_NAMESPACE) | grep
            $(params.APP_NAME)
      runAfter:
        - new-pod-replicas
      taskRef:
        kind: ClusterTask
        name: openshift-client
      when:
        - input: $(tasks.check-deployment-exist.results.existed-num)
          operator: in
          values:
            - '0'
    - name: deploy-new-update
      params:
        - name: NAMESPACE
          value: $(params.TARGET_NAMESPACE)
        - name: ROUTE_NAME
          value: $(params.APP_NAME)
        - name: BLUE_DEPLOY
          value: $(params.APP_NAME)-blue
        - name: GREEN_DEPLOY
          value: $(params.APP_NAME)-green
        - name: CONTAINER_NAME
          value: $(params.APP_NAME)
        - name: IMAGE_NAME
          value: $(params.IMAGE_NAME)
        - name: CONTAINER_TAG
          value: $(tasks.get-build-id.results.build-id)
      runAfter:
        - latest-tag
      taskRef:
        kind: Task
        name: deploy-new-update
      when:
        - input: $(tasks.check-deployment-exist.results.existed-num)
          operator: in
          values:
            - '1'
    - name: change-route-weight
      params:
        - name: NAMESPACE
          value: $(params.TARGET_NAMESPACE)
        - name: ROUTE_NAME
          value: $(params.APP_NAME)
        - name: SERVICE_BLUE
          value: $(params.APP_NAME)-blue
        - name: SERVICE_GREEN
          value: $(params.APP_NAME)-green
      runAfter:
        - deploy-new-update
      taskRef:
        kind: Task
        name: change-route-weight
      when:
        - input: $(tasks.check-deployment-exist.results.existed-num)
          operator: in
          values:
            - '1'
    - name: change-pod-replicas
      params:
        - name: NAMESPACE
          value: $(params.TARGET_NAMESPACE)
        - name: ROUTE_NAME
          value: $(params.APP_NAME)
        - name: BLUE_APP
          value: $(params.APP_NAME)-blue
        - name: GREEN_APP
          value: $(params.APP_NAME)-green
      runAfter:
        - change-route-weight
      taskRef:
        kind: Task
        name: change-pod-replicas
      when:
        - input: $(tasks.check-deployment-exist.results.existed-num)
          operator: in
          values:
            - '1'
    - name: bg-status
      params:
        - name: SCRIPT
          value: >-
            echo '## Pod Info'

            oc get pod -n $(params.TARGET_NAMESPACE) | grep $(params.APP_NAME)

            echo ' '

            echo '## Service Info'

            oc get svc -n $(params.TARGET_NAMESPACE) | grep $(params.APP_NAME)

            echo ' '

            echo '## Route Info'

            oc get route  -n $(params.TARGET_NAMESPACE) | grep
            $(params.APP_NAME)
      runAfter:
        - change-pod-replicas
      taskRef:
        kind: ClusterTask
        name: openshift-client
      when:
        - input: $(tasks.check-deployment-exist.results.existed-num)
          operator: in
          values:
            - '1'
  workspaces:
    - name: workspace
